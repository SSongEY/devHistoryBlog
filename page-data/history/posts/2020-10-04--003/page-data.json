{"componentChunkName":"component---src-templates-post-template-jsx","path":"/history/posts/2020-10-04--003","result":{"data":{"site":{"siteMetadata":{"title":"Blog by Eunyoung","subtitle":"일상 & 작업 기록 블로그","copyright":"© All rights reserved.","author":{"name":"EunYoung","twitter":"#"},"disqusShortname":"","url":"https://eunyoung-autocrypt.github.io"}},"markdownRemark":{"id":"483c26b1-862b-5fc7-adb7-066867d3bae6","html":"<ul>\n<li><a href=\"/devHistoryBlog/history/posts/2020-10-04--003--01\">아이템1) 생성자 대신 정적 팩터리 메서드를 고려해라</a></li>\n<li><a href=\"/devHistoryBlog/history/posts/2020-10-04--003--02\">아이템2) 생성자에 매개변수가 많다면 빌더를 고려하라</a></li>\n<li><a href=\"/devHistoryBlog/history/posts/2020-10-04--003--03\">아이템3) private 생성자나 열거 타입으로 싱글턴임을 보증하라</a></li>\n<li><a href=\"/devHistoryBlog/history/posts/2020-10-04--003--04\">아이템4) 인스턴스화를 막으려거든 private 생성자를 사용하라</a></li>\n<li><a href=\"/devHistoryBlog/history/posts/2020-10-04--003--05\">아이템5) 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라</a></li>\n<li><a href=\"/devHistoryBlog/history/posts/2020-10-04--003--06\">아이템6) 불필요한 객체 생성을 피해라</a></li>\n<li><a href=\"/devHistoryBlog/history/posts/2020-10-04--003--07\">아이템7) 다 쓴 객체 참조를 해제하라</a></li>\n<li><a href=\"/devHistoryBlog/history/posts/2020-10-04--003--08\">아이템8) finalizer 와 cleaner 사용을 피해라</a></li>\n<li><a href=\"/devHistoryBlog/history/posts/2020-10-04--003--09\">아이템9) try-finally 보다는 try-with-resources를 사용하라</a></li>\n</ul>","fields":{"tagSlugs":["/tags/책리뷰/","/tags/이펙티브자바/"],"slug":"/history/posts/2020-10-04--003"},"frontmatter":{"title":"[책리뷰/Effective Java] 객체 생성과 파괴","tags":["책리뷰","이펙티브자바"],"date":"2020-10-04","description":""}}},"pageContext":{"slug":"/history/posts/2020-10-04--003"}},"staticQueryHashes":[]}