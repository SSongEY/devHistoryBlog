{"componentChunkName":"component---src-templates-post-template-jsx","path":"/history/posts/2020-05-21--001","result":{"data":{"site":{"siteMetadata":{"title":"Blog by Eunyoung","subtitle":"일상 & 작업 기록 블로그","copyright":"© All rights reserved.","author":{"name":"EunYoung","twitter":"#"},"disqusShortname":"","url":"https://eunyoung-autocrypt.github.io"}},"markdownRemark":{"id":"3f427340-8d57-5f1d-a747-093eb3787664","html":"<h3>Cipher Suite</h3>\n<ul>\n<li>TLS에서는 암호화하는 방법을 표준으로 특정하지 않고, server와 client가 합의해서 결정한다. </li>\n<li>서로 합의해야 하는 알고리즘은 4가지이다.<br>\n— 대칭키 전달 방식,<br>\n— 인증서 서명 방식,<br>\n— 대칭키 알고리즘,<br>\n— HMAC 알고리즘</li>\n<li>TLS에서는 서버와 클라이언트가 이 4가지 알고리즘을 세트로 합의하고, 합의된 알고리즘으로 application layer의 내용을 암호화해서 전송한다.</li>\n<li>cipher suite는 TLS<em>ECDHE</em>RSA<em>WITH</em>AES<em>256</em>GCM_SHA384와 같이 표기한다. 이 cipher suite를 읽어보면, 다음과 같이 해석할 수 있다.<br>\n— 대칭키 전달 방식은 ECDHE(Elliptic Curve Diffie Hellman Ephermeral)을 사용하며,<br>\n— 인증서 서명 방식은 RSA로 서명된 인증서로 상호간의 신원을 확인하고,<br>\n— 대칭키 암호화 알고리즘은 AES 256bit와 GCM를 채택하고,<br>\n— HMAC 알고리즘으로는 SHA 384를 사용해서 메시지의 무결성을 확인한다.</li>\n<li>cipher suite는 여러가지 있다. 그중에서 client가 지원하면서 취약하지 않은 cipher suite의 리스트를 서버에게 알려주면, 서버는 그중에 지원하는 cipher suite를 선택해서 보내 합의한다.</li>\n</ul>","fields":{"tagSlugs":["/tags/tls/","/tags/cipher-suite/"],"slug":"/history/posts/2020-05-21--001"},"frontmatter":{"title":"[TLS] Cipher Suite","tags":["tls","cipher suite"],"date":"2020-05-21","description":""}}},"pageContext":{"slug":"/history/posts/2020-05-21--001"}},"staticQueryHashes":[]}